function fiducials = KINECT_importTrackingIni(filename, varargin)
%KINECT_importTrackingIni Import numeric data from a text file as a matrix.
%   COIL = KINECT_importTrackingIni(FILENAME) Reads data from text file  
%   FILENAME for the default selection.
%
%   COIL = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   coil = importfile('coil.ini', 1, 19);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/06/20 12:33:50
% Done by Mirko Schimkat on 2016/06/20

%% Initialize variables.
delimiter   = '=';
startRow    = 1;
endRow      = 19;
doStruct    = false;

roundVar    = false;

%% Varargin
for i=1:numel(varargin)
    if strcmp(varargin{i}, 'struct')
        doStruct = true;
    elseif strcmp(varargin{i},'round')
        roundVar = true;
    end
    
end

%% Format string for each line of text:
%   column1: text (%s)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
dataArray(2) = cellfun(@(x) num2cell(x), dataArray(2), 'UniformOutput', false);
Datas = [dataArray{1:end-1}];

%% Order Struct
if doStruct
    fiducials = struct();
    fiducials(1).x = Datas{2,2};
    fiducials(1).y = Datas{3,2};
    fiducials(1).z = Datas{4,2};

    fiducials(2).x = Datas{6,2};
    fiducials(2).y = Datas{7,2};
    fiducials(2).z = Datas{8,2};

    fiducials(3).x = Datas{10,2};
    fiducials(3).y = Datas{11,2};
    fiducials(3).z = Datas{12,2};

    fiducials(4).x = Datas{14,2};
    fiducials(4).y = Datas{15,2};
    fiducials(4).z = Datas{16,2};
else
    fiducials(1,1) = Datas{2,2};
    fiducials(1,2) = Datas{3,2};
    fiducials(1,3) = Datas{4,2};
             
    fiducials(2,1) = Datas{6,2};
    fiducials(2,2) = Datas{7,2};
    fiducials(2,3) = Datas{8,2};
            
    fiducials(3,1) = Datas{10,2};
    fiducials(3,2) = Datas{11,2};
    fiducials(3,3) = Datas{12,2};
              
    fiducials(4,1) = Datas{14,2};
    fiducials(4,2) = Datas{15,2};
    fiducials(4,3) = Datas{16,2};
end

if roundVar
    fiducials = round(fiducials);
end
    
end